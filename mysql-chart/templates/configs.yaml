apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config-{{ .Release.Name }}
  namespace: mysql
data:
  mysync.yaml: |-
    log: /dev/stderr
    loglevel: Debug
    db_timeout: 3s
    db_lost_check_timeout: 1s
    tick_interval: 2s
    healthcheck_interval: 3s
    dcs_wait_timeout: 10s
    failover: true
    failover_cooldown: 60s
    failover_delay: 30s
    inactivation_delay: -5s
    resetupfile: /tmp/mysync.resetup
    resetup_crashed_hosts: false
    hostname: $HOSTNAME
    mysql:
      user: {{ .Values.mysql.root_user }}
      password: {{ .Values.mysql.root_pass }}
      replication_user: {{ .Values.mysql.repl_user }}
      replication_password: {{ .Values.mysql.repl_pass }}
      port: 3306
      external_replication_ssl_ca: /etc/mysql/ssl/external_CA.pem
      pid_file: /var/lib/mysql/mysqld.pid
      error_log: /var/log/mysql/error.log
    disable_semi_sync_replication_on_maintenance: true
    critical_disk_usage: 90
    keep_super_writable_on_critical_disk_usage: false
    test_disk_usage_file: /tmp/usedspace
    db_set_ro_force_timeout: 40s
    db_set_ro_timeout: 30s
    offline_mode_enable_lag: 10s
    offline_mode_disable_lag: 5s
    priority_choice_max_lag: 60s
    disable_set_readonly_on_lost: false
    stream_from_reasonable_lag: 5m
    exclude_users:
      - 'repl'
      - '{{ .Values.mysql.root_user }}'
    replication_repair_cooldown: 10s
    replication_repair_aggressive_mode: false
    test_filesystem_readonly_file: /tmp/readonly
    replication_channel: ''
    external_replication_type: 'off'
    semi_sync: true
    rpl_semi_sync_master_wait_for_slave_count: {{ div .Values.replicaCount 2 }}
    zookeeper:
      session_timeout: 5s
      namespace: /mysql
      hostname: $HOSTNAME
      hosts:
      {{- $nodeCount := .Values.replicaCount | int }}
      {{- $releaseName := .Release.Name }}
      {{- range $index0 := until $nodeCount -}}
        {{ print "- " $releaseName "-" $index0 "." $releaseName "-mysql-cluster.mysql.svc.cluster.local:2181"  | nindent 6 }}
      {{- end }}

  init-master.sql: |
    SET GLOBAL super_read_only = 0;

    CREATE USER '{{ .Values.mysql.root_user }}'@'%' IDENTIFIED BY '{{ .Values.mysql.root_pass }}';
    GRANT ALL PRIVILEGES ON *.* TO '{{ .Values.mysql.root_user }}'@'%' WITH GRANT OPTION;

    CREATE USER '{{ .Values.mysql.repl_user }}'@'%' IDENTIFIED BY '{{ .Values.mysql.repl_pass }}';
    GRANT REPLICATION SLAVE ON *.* TO '{{ .Values.mysql.repl_user }}'@'%';

    CREATE DATABASE '{{ .Values.mysql.user_database }}';

    CREATE USER '{{ .Values.mysql.user }}'@'%' IDENTIFIED BY '{{ .Values.mysql.user_password }}';
    GRANT ALL ON '{{ .Values.mysql.user_database }}'.* TO '{{ .Values.mysql.user }}'@'%';

    RESET MASTER;
    SET GLOBAL super_read_only = 1;
  init-slave.sql: |
    ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ .Values.mysql.root_pass }}';
    RESET MASTER;
    SET GLOBAL super_read_only = 1;
  make-slave.sql: |
    STOP REPLICA;
    RESET REPLICA FOR CHANNEL '';
    CHANGE MASTER TO
      MASTER_HOST = '{{ .Release.Name }}-0.{{ .Release.Name }}-mysql-cluster.mysql.svc.cluster.local',
      MASTER_USER = '{{ .Values.mysql.repl_user }}',
      MASTER_PASSWORD = '{{ .Values.mysql.repl_pass }}',
      MASTER_AUTO_POSITION = 1,
      MASTER_CONNECT_RETRY = 1,
      MASTER_RETRY_COUNT = 100500 FOR CHANNEL '';
    START REPLICA;
  server.cnf: |
    [mysqld]
    plugin_load_add = 'rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so'
    pid_file=/var/lib/mysql/mysqld.pid
    gtid_mode=ON
    enforce_gtid_consistency=ON
    log_replica_updates=ON
    binlog_format=ROW
    sync_binlog=1
    innodb_flush_log_at_trx_commit=1
    read_only=ON
    super_read_only=ON
    default_authentication_plugin=mysql_native_password
    server-id=$SERVER_ID
    log-bin
  add-host.sh: |
    #!/bin/bash
    mysync host add $POD_NAME.{{ print .Release.Name "-mysql-cluster.mysql.svc.cluster.local" }};
    while [ -z $(mysync hosts | grep $POD_NAME.{{ print .Release.Name "-mysql-cluster.mysql.svc.cluster.local" }}) ];
    do
      mysync host add $POD_NAME.{{ print .Release.Name "-mysql-cluster.mysql.svc.cluster.local" }};
    done
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-config-{{ .Release.Name }}
  namespace: services
data:
  get-master.sh: |
    for((i=0;i<{{ .Values.replicaCount }};i++)) {
      master=$(/usr/share/zookeeper/bin/zkCli.sh -server {{ .Release.Name }}-$i.{{ .Release.Name }}-mysql-cluster.mysql.svc.cluster.local:2181 get /mysql/master 2>/dev/null | grep -o '"[^"]*"' | tr -d \")
      if [[ $master ]]; then
          break;
      fi
    }
    echo $master | tr -d '\n';
